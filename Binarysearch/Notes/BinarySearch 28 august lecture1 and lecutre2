 //1. iterative approach
//2. time complexity
//3. find the floor / roof value of given element using binarySearch(solve egg problem)
//4. find an element in rotated sorted array.

//Iterative approach

//function iterativeBinarySearch(arr, elementValue) {
//    let start = 0;
//    let end = arr.length - 1;

//    for (let mid = Math.floor((start + end) / 2);start <= end; mid = Math.floor((start + end) / 2)) {
//        if (arr[mid] == elementValue) {
//            return mid;
//        } else if (arr[mid] > elementValue) {
//            end = mid - 1;
//        } else {
//            start = mid + 1;            
//        }
//    }
//    return -1;
//}b l

//let arr = [10, 13, 15, 45, 67, 89]
//elementValue = 13
//console.log(iterativeBinarySearch(arr, elementValue));

//[Homework]
//You have given a sorted array which can contain duplicates(repeating number).You have to find startIndex and endIndex
//of the given element value. (Get the overall complexity as log(N))
//[10, 13, 45, 57, 57, 57, 98, 98, 98, 100, 120]
//elementValue = 57

//TimeComplexity / SpaceComplexity

//T(N) = 1 + T(N / 2)
//     = 1 + 1 + T(N / 4) = 2 + T(N/2^2)
//     = 1 + 1 + 1 + T(N / 8) = 3 + T(N/2^3)
//     = K + T(N / 2 ^ K)

//     = K + T(1)


//N / 2 ^ K = 1
//N = 2 ^ K
//log N = log(2 ^ K)
//log N = K Log 2
//K = logN

//T(N) = logN + T(1) = log N

//BestCaseTimeComplexity: 1
//WorstCaseTimeComplexity: logN
//AverageCaseTimeComplexity: logN

//BestCaseSpaceComplexity: 1
//WorstCaseSpaceComplexity: logN(recursion), iterative: 1
//AverageCaseSpaceComplexity: logN(recursion), iterative: 1

//Question:(FindingFloorElement in sorted array)
//find the element value in sorted array and if element value is not present than print the maximum value from the array
//which is smaller than given element.And if given element is smaller then all of the elments then print - 1.

//let arr = [10, 13, 15, 45, 67, 89]

//Input: 30, Output: 15
//Input: 100, Output: 89
//Input 1, -1


//function findingFloorElement(arr, elementValue) {
//    let start = 0;
//    let end = arr.length - 1;
//    let floorValue = -1
//    for (let mid = Math.floor((start + end) / 2); start <= end; mid = Math.floor((start + end) / 2)) {
//        if (arr[mid] == elementValue) {
//            return mid;
//        } else if (arr[mid] > elementValue) {
//            end = mid - 1;
//        } else if (arr[mid] < elementValue) {
//            floorValue = arr[mid];
//            start = mid + 1;
//        }
//    }
//    return floorValue;
//}
//let arr = [10, 13, 15, 45, 67, 89]
//console.log(findingFloorElement(arr, 21))



//In a building there are N floors.You have to find the maximum floor number from which if you will
//throw an egg then it will not break.If you will throw egg from x floor and if it will break then
//assume egg will be break if throw from any floor number higher than x.You have to use minimum number
//of eggs(in worst case) for this experiment.
//    Solution: use binary search, first go to N / 2th floor and throw egg, if broken test for floors below N / 2 other test for floors
//    above N / 2th floor.And repeat the same process until you will find the floor from where egg will break.







//function isEggBroken(floorNumber) {
//   //some body which you don't know;
//    return floorNumber > 15;
//}


//function findFloorNumber(start, end) {
//    if (start > end) {
//        return -1
//    }
//    let mid = Math.floor((start+end)/2)
//    if (isEggBroken(mid)) {
//        let minFloorNumber = findFloorNumber(start, mid - 1)
//        if (minFloorNumber == -1) {
//            return mid;
//        }
//        return minFloorNumber
//    } else {
//        return findFloorNumber(mid + 1, end)
//    }
//}

//N = 20
//console.log(findFloorNumber(0, N));

//(0, 20) => 10 => false
//(11, 20) => 15 => false
//(16, 20) => 18 => true
//(16, 17) => 16 => true
//(16, 16) => 16 => true
//(16, 15) => -1


//let arr = [15, 89, 93, 21, 45, 32]

//time complexity for creation of set: nlogn
//time complexity of searching element in array: N

//Q elements in an DataStructure(array, set)
//N * Q -> Array
//N log N + Q log N -> Set

//Q >>>>> N
//Array(Q * N)
//Set(QlogN)

//userId:, name: ,profilePhoto:, 

//Accoutn creation of any user <<<<<<<< Accessing the account by user






//Problem: 
//find an element in rotated sorted array.

function findPivot(arr) {
    let start = 0;
    let end = arr.length - 1;
    for (let mid = Math.floor((start + end) / 2); start <= end; mid = Math.floor((start + end) / 2)) {
        if (mid + 1 <= end && arr[mid] > arr[mid + 1]) {
            return mid + 1;
        } else if (start <= mid-1 &&  arr[mid] < arr[mid - 1]) {
            return mid;
        } else if (arr[start] <= arr[mid]) {
            start = mid;
        } else {
            end = mid;
        }
    }
}

let arr = [50, 60, 70, 80, 90, 100, 110, 120, 10, 20, 30, 40, 50];
let pivotIdx = findPivot(arr);
console.log(findPivot(arr));
binarySear(arr, 0, pivotIdx - 1)
binarySear(arr, pivotIdx, arr.length-1)